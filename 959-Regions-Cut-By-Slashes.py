from typing import List
import sys


class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        sys.setrecursionlimit(10 ** 6)

        self.ans = 0
        self.drawing = []
        self.n = len(grid) * 3
        for i in range(len(grid)):
            s1, s2, s3 = [], [], []
            for j in range(len(grid[i])):
                if grid[i][j] == ' ':
                    s1.extend([0, 0, 0])
                    s2.extend([0, 0, 0])
                    s3.extend([0, 0, 0])
                elif grid[i][j] == '/':
                    s1.extend([0, 0, 1])
                    s2.extend([0, 1, 0])
                    s3.extend([1, 0, 0])
                elif grid[i][j] == '\\':
                    s1.extend([1, 0, 0])
                    s2.extend([0, 1, 0])
                    s3.extend([0, 0, 1])
            self.drawing.append(s1)
            self.drawing.append(s2)
            self.drawing.append(s3)

        self.colored = set()
        for i in range(len(self.drawing)):
            for j in range(len(self.drawing[i])):
                if (i, j) in self.colored:
                    continue
                else:
                    if self.drawing[i][j] == 0:
                        self.dfs(i, j)
        return self.ans

    def dfs(self, i, j, new=True):
        if i < 0 or i >= self.n or j < 0 or j >= self.n or self.drawing[i][j] == 1 or (i, j) in self.colored:
            return
        self.colored.add((i, j))
        if new:
            self.ans += 1
        self.dfs(i, j + 1, False)
        self.dfs(i + 1, j, False)
        self.dfs(i - 1, j, False)
        self.dfs(i, j - 1, False)


if __name__ == '__main__':
    for el in [
        [" /", "/ "],
        [" /", "  "],
        ["/\\", "\\/"],
        ["/\\/\\", "\\/\\/", "/\\/\\", "\\/\\\\"],
        ["   ", "   ", "   "],
        [" /\\", " \\/", "\\  "],
        [

        ],
        [
            "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\", "/\\/\\  /\\/\\  /\\/\\"
        ],
    ]:
        print(
            Solution().regionsBySlashes(
                grid=el
            )
        )
